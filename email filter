import re
import locale
import time
from datetime import datetime, timedelta

self.progress.start()
self.clear_results()
self.emails = []
self.unfound_trades = []

try:
    # 1. User specifies folders/mailboxes to search (not hardcoded!)
    # folders = [folder1, folder2, ...] # Gathered from UI or config

    # 2. Date setup
    today = datetime.now()
    days_back = 12
    date_limit = today - timedelta(days=days_back)

    # 3. Auto-detect system date format for Restrict
    sys_format = None
    if time.strftime('%x')[0:2].isdigit() and time.strftime('%x')[2] in ['/', '-', '.']:
        sep = time.strftime('%x')[2]
        if sep == '/':
            sys_format = (
                '%m/%d/%Y' if today.strftime('%x').split('/')[0] == today.strftime('%m')
                else '%d/%m/%Y'
            )
        elif sep == '-':
            sys_format = '%Y-%m-%d'
        else:
            sys_format = '%d.%m.%Y'
    if not sys_format:
        sys_format = '%m/%d/%Y'   # Fallback: US

    print(f"SYSTEM DATE FORMAT DETECTED: {sys_format}")

    # 4. Regex for all trade IDs
    pattern = re.compile("|".join(re.escape(tid) for tid in trade_ids))

    # 5. Search loop
    for folder in folders:
        # Prepare single date query string
        date_str = date_limit.strftime(sys_format)

        items_list = []
        for ampm_case in [('AM', 'PM'), ('am', 'pm')]:
            start = f"{date_str} 12:00:00 {ampm_case[0]}"
            end = f"{date_str} 11:59:59 {ampm_case[1]}"
            filter_str = f"[ReceivedTime] >= '{start}' AND [ReceivedTime] <= '{end}'"
            print(f"Trying filter: {filter_str}")
            items = folder.Items.Restrict(filter_str)
            items_list = list(items)
            if items_list:
                print(f"Matched emails with {ampm_case}: {len(items_list)}")
                break  # Use this case if emails are found

        # If date restrict fails, you may opt to use a wider filter or try 24-hour as a fallback

        for item in items_list:
            if item.Class == 43:
                subject = item.Subject or ""
                sender = getattr(item, "SenderName", "")
                recipient = getattr(item, "To", "")
                date_val = item.ReceivedTime.strftime("%Y-%m-%d %H:%M:%S")
                if pattern.search(subject):
                    matched_tid = pattern.findall(subject)
                else:
                    body = item.Body or ""
                    html_body = ""
                    try:
                        html_body = item.HTMLBody
                    except:
                        pass
                    all_text = body + ("\n" + html_body if html_body else "")
                    if not pattern.search(all_text):
                        continue
                    matched_tid = pattern.findall(all_text)

                for tid in set(matched_tid):
                    self.emails.append({
                        'trade_id': tid,
                        'subject': subject[:60] + "..." if len(subject) > 60 else subject,
                        'sender': sender[:20],
                        'recipient': recipient[:20],
                        'date': date_val,
                        'body': item.Body,
                        'email_type': "Original",
                    })

    # 6. Post-processing
    found_trade_ids = set(mail['trade_id'] for mail in self.emails)
    self.unfound_trades = [tid for tid in trade_ids if tid not in found_trade_ids]

    # 7. Fill GUI table
    for idx, mail in enumerate(self.emails):
        email_type = "Original"
        subj = mail['subject'].lower()
        if "re:" in subj:
            email_type = f"Reply {idx}"
        elif "fw:" in subj or "fwd:" in subj:
            email_type = f"Forward {idx}"
        else:
            email_type = f"Email {idx}"
        self.tree.insert(
            '', 'end', iid=str(idx),
            values=(
                mail['trade_id'],
                mail['subject'],
                mail['sender'],
                mail['recipient'],
                mail['date'],
                email_type
            )
        )

    messagebox.showinfo("Success", f"Loaded {len(self.emails)} emails across {len(trade_ids)} Trade IDs.")

except Exception as e:
    messagebox.showerror("Extraction Error", f"Failed to extract emails: {e}")
finally:
    self.progress.stop()
