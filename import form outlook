import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import pandas as pd
import os
import re
import json
import extract_msg
import html2text
import tempfile
from datetime import datetime

class EmailEntityExtractor:
    def __init__(self, root):
        self.root = root
        self.root.title("Email Entity Extractor")
        self.root.geometry("1300x950")
        self.root.resizable(True, True)

        style = ttk.Style()
        style.theme_use('clam')

        main_frame = ttk.Frame(root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        root.columnconfigure(0, weight=1)
        root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(7, weight=1)

        # Browse for MSG file
        ttk.Label(main_frame, text="MSG File:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.file_path_var = tk.StringVar()
        file_entry = ttk.Entry(main_frame, textvariable=self.file_path_var, width=50)
        file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=5, padx=(0, 5))
        ttk.Button(main_frame, text="Browse", command=self.browse_file).grid(row=0, column=2, pady=5)

        # Outlook folder selection
        ttk.Label(main_frame, text="Outlook Folder:").grid(row=0, column=3, sticky=tk.W, pady=5)
        self.folder_var = tk.StringVar(value="Inbox")
        folder_combo = ttk.Combobox(main_frame, textvariable=self.folder_var,
                                   values=["Inbox", "Sent Items", "Drafts", "Archive"], width=15)
        folder_combo.grid(row=0, column=4, sticky=(tk.W), pady=5, padx=(5,0))

        # Trade ID input
        ttk.Label(main_frame, text="Trade ID:").grid(row=0, column=5, sticky=tk.W, pady=5)
        self.trade_id_var = tk.StringVar()
        trade_id_entry = ttk.Entry(main_frame, textvariable=self.trade_id_var, width=20)
        trade_id_entry.grid(row=0, column=6, pady=5, padx=(0, 5))

        # Entity definitions text area
        ttk.Label(main_frame, text="Entity Definitions (JSON format):").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.entity_text = scrolledtext.ScrolledText(main_frame, width=90, height=10)
        self.entity_text.grid(row=1, column=1, columnspan=6, sticky=(tk.W, tk.E), pady=5)

        # Default entity pattern JSON
        package_pattern = r"(?P<TradeID>\d{7,8}[A-Z]?)\s+(?P<Currency>[A-Z]{3})\s+(?P<Amount>\d{1,3}(?:,\d{3})*\.\d{2})\s+(?P<StartDate>\d{2}/\d{2}/\d{4})\s+(?P<EndDate>\d{2}/\d{2}/\d{4})\s+(?P<Book1>\w+)\s+(?P<Book2>\w+)"
        custom_entities = {
            "entities": [
                {"name": "PackageDetails", "type": "pattern", "patterns": [package_pattern]},
                {"name": "TradeID", "type": "pattern", "patterns": [r"\b\d{7,8}[A-Z]?\b"]},
                {"name": "Currency", "type": "pattern", "patterns": [r"\b[A-Z]{3}\b"]},
                {"name": "Amount", "type": "pattern", "patterns": [r"\d{1,3}(?:,\d{3})*\.\d{2}"]},
                {"name": "StartDate", "type": "pattern", "patterns": [r"\b\d{2}/\d{2}/\d{4}\b"]},
                {"name": "EndDate", "type": "pattern", "patterns": [r"\b\d{2}/\d{2}/\d{4}\b"]},
                {"name": "Book1", "type": "pattern", "patterns": [r"\b\w+\b"]},
                {"name": "Book2", "type": "pattern", "patterns": [r"\b\w+\b"]}
            ]
        }
        self.entity_text.insert(1.0, json.dumps(custom_entities, indent=2))

        # Buttons frame
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=2, column=0, columnspan=7, pady=10)

        ttk.Button(button_frame, text="Extract Email Chain (.msg)", command=self.extract_email_chain).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Extract from Outlook", command=self.extract_email_chain_from_outlook).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Extract Entities", command=self.extract_entities).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Clear Results", command=self.clear_results).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Export to CSV", command=self.export_to_csv).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Save Config", command=self.save_config).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Load Config", command=self.load_config).pack(side=tk.LEFT, padx=5)

        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=3, column=0, columnspan=7, sticky=(tk.W, tk.E), pady=5)

        ttk.Label(main_frame, text="Email Chain:").grid(row=4, column=0, sticky=tk.W, pady=5)

        self.tree = ttk.Treeview(main_frame, columns=('Subject', 'From', 'To', 'Date', 'Email Type'), show='headings')
        self.tree.heading('Subject', text='Subject')
        self.tree.heading('From', text='From')
        self.tree.heading('To', text='To')
        self.tree.heading('Date', text='Date')
        self.tree.heading('Email Type', text='Email Type')
        self.tree.column('Subject', width=200)
        self.tree.column('From', width=120)
        self.tree.column('To', width=120)
        self.tree.column('Date', width=120)
        self.tree.column('Email Type', width=80)
        self.tree.grid(row=5, column=0, columnspan=7, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        tree_scroll = ttk.Scrollbar(main_frame, orient=tk.VERTICAL, command=self.tree.yview)
        tree_scroll.grid(row=5, column=7, sticky=(tk.N, tk.S))
        self.tree.configure(yscrollcommand=tree_scroll.set)

        ttk.Label(main_frame, text="Email Content:").grid(row=6, column=0, sticky=tk.W, pady=5)
        self.content_text = scrolledtext.ScrolledText(main_frame, width=80, height=20)
        self.content_text.grid(row=7, column=0, columnspan=5, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)

        ttk.Label(main_frame, text="Extracted Entities:").grid(row=6, column=5, sticky=tk.W, pady=5)
        self.entity_result_text = scrolledtext.ScrolledText(main_frame, width=40, height=20)
        self.entity_result_text.grid(row=7, column=5, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)

        self.tree.bind('<<TreeviewSelect>>', self.on_email_select)

        self.emails = []
        self.current_email_index = -1
        self.entity_definitions = custom_entities

    # Add the Outlook connection method
    def connect_to_outlook(self):
        try:
            import win32com.client
            outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
            folder_name = self.folder_var.get()
            
            if folder_name == "Inbox":
                folder = outlook.GetDefaultFolder(6)  # Inbox
            elif folder_name == "Sent Items":
                folder = outlook.GetDefaultFolder(5)  # Sent Items
            elif folder_name == "Drafts":
                folder = outlook.GetDefaultFolder(16)  # Drafts
            elif folder_name == "Archive":
                folder = outlook.GetDefaultFolder(4)  # Archive
            else:
                folder = outlook.GetDefaultFolder(6)  # Default Inbox
            
            return folder
        except Exception as e:
            messagebox.showerror("Outlook Connection Error", f"Failed to connect to Outlook: {e}")
            return None

    # New method to extract email chain from Outlook folder
    def extract_email_chain_from_outlook(self):
        trade_id = self.trade_id_var.get().strip()
        if not trade_id:
            messagebox.showwarning("Input Error", "Please enter a Trade ID")
            return

        folder = self.connect_to_outlook()
        if not folder:
            return

        self.progress.start()
        self.clear_results()
        self.emails = []

        try:
            items = folder.Items
            items.Sort("[ReceivedTime]", True)
            for item in items:
                if item.Class == 43:
                    subject = item.Subject or ""
                    body = item.Body or ""
                    html_body = ""
                    try:
                        html_body = item.HTMLBody
                    except:
                        pass
                    if (trade_id in subject) or (trade_id in body) or (html_body and trade_id in html_body):
                        email_data = {
                            'subject': subject,
                            'sender': item.SenderName,
                            'recipient': item.To if hasattr(item, 'To') else "",
                            'date': item.ReceivedTime.strftime("%Y-%m-%d %H:%M:%S") if item.ReceivedTime else "",
                            'body': body,
                            'html_body': html_body
                        }
                        self.emails.append(email_data)

            self.sort_emails_by_date()

            for i, email_data in enumerate(self.emails):
                email_type = "Original"
                if i > 0:
                    subj = email_data['subject'].lower()
                    if "re:" in subj:
                        email_type = f"Reply {i}"
                    elif "fw:" in subj or "fwd:" in subj:
                        email_type = f"Forward {i}"
                    else:
                        email_type = f"Email {i}"

                self.tree.insert('', 'end', iid=str(i), values=(
                    email_data['subject'][:30] + "..." if len(email_data['subject']) > 30 else email_data['subject'],
                    email_data['sender'][:20] + "..." if len(email_data['sender']) > 20 else email_data['sender'],
                    email_data['recipient'][:20] + "..." if len(email_data['recipient']) > 20 else email_data['recipient'],
                    email_data['date'],
                    email_type
                ))

            if not self.emails:
                messagebox.showinfo("No Emails", "No emails found in the Outlook folder with the specified Trade ID")
            else:
                messagebox.showinfo("Success", f"Found {len(self.emails)} emails in the Outlook folder")

        except Exception as e:
            messagebox.showerror("Extraction Error", f"An error occurred loading emails: {e}")
        finally:
            self.progress.stop()

    # Keep remaining methods unchanged (e.g., browse_file, extract_email_chain, extract_entities, export_to_csv, etc.)
    # ...

if __name__ == "__main__":
    root = tk.Tk()
    app = EmailEntityExtractor(root)
    root.mainloop()
