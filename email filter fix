import re
from datetime import datetime, timedelta

def get_receivedtime_format_from_item(item):
    """
    Infers the exact string format for the current user's region/locale
    by inspecting a real ReceivedTime, e.g. '09/10/2025 00:00:00'
    or '10-09-2025 12:00:00 AM' or '09.10.2025 00:00'
    """
    sample_str = str(item.ReceivedTime)
    # Examples:
    # '09/10/2025 00:00:00'
    # '10-09-2025 12:00:00 AM'
    # Try to parse with all possible nearly-matching formats
    # (You can add more formats if needed)
    for date_fmt in [
        "%d/%m/%Y %H:%M:%S",
        "%d/%m/%Y %H:%M",
        "%d-%m-%Y %H:%M:%S",
        "%d-%m-%Y %H:%M",
        "%Y-%m-%d %H:%M:%S",
        "%Y-%m-%d %H:%M",
        "%m/%d/%Y %I:%M:%S %p",
        "%d/%m/%Y %I:%M:%S %p",
        "%d-%m-%Y %I:%M:%S %p",
        "%m/%d/%Y %H:%M:%S",
    ]:
        try:
            dt = datetime.strptime(sample_str, date_fmt)
            return date_fmt
        except Exception:
            continue
    raise ValueError("Could not infer ReceivedTime format: " + sample_str)

def extract_email_chain_from_outlook(self):
    # ...other unchanged setup...
    try:
        today = datetime.now()
        days_back = 3
        
        # Grab one real item as template!
        folder = self.connect_to_outlook()
        example_item = None
        for i in range(folder.Items.Count):
            example_item = folder.Items.Item(i+1)
            if example_item and getattr(example_item, "ReceivedTime", None):
                break
        if not example_item:
            messagebox.showerror("NoMail", "Could not sample a real email to infer format.")
            return
        
        true_fmt = get_receivedtime_format_from_item(example_item)
        print("Actual system Outlook wants:", true_fmt, "| strftime example:", today.strftime(true_fmt))

        pattern = re.compile("|".join(re.escape(tid) for tid in trade_ids))
        all_items = []
        for days_ago in range(1, days_back+1):
            dt = today - timedelta(days=days_ago)
            date_start = dt.replace(hour=0, minute=0, second=0)
            date_end = dt.replace(hour=23, minute=59, second=59)
            start_time = date_start.strftime(true_fmt)
            end_time = date_end.strftime(true_fmt)
            filter_str = f"[ReceivedTime] >= '{start_time}' AND [ReceivedTime] <= '{end_time}'"
            print(f"Trying Restrict filter: {filter_str}")
            items = folder.Items.Restrict(filter_str)
            items_list = list(items)
            if items_list:
                print(f"Got {len(items_list)} emails for {start_time.split()[0]}")
                all_items.extend(items_list)
            else:
                print(f"No emails for {start_time.split()[0]}")

        # ...unchanged: trade_id matching, building self.emails, updating GUI...

    except Exception as e:
        messagebox.showerror("Extraction Error", f"Failed to extract emails: {e}")
    finally:
        self.progress.stop()
