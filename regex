^\d+L\d*\s+[A-Z]{3}\s+[\d,]+\.\d{2}\s+\d{2}/\d{2}/\d{4}\s+\d{2}/\d{2}/\d{4}\s+\S+\s+\S+$

^(\d+[A-Z0-9]+)\s+([A-Z]{3})\s+([\d,]+\.\d{2})\s+(\d{2}/\d{2}/\d{4})\s+(\d{2}/\d{2}/\d{4})\s+(\w+)\s+(\w+)\s+(\w+)$
default_attributes = """Trade ID:Trade\s*ID[:\s]*([A-Z0-9-]+)
Date:Date[:\s]*(\d{1,2}[-/]\d{1,2}[-/]\d{2,4})
Time:Time[:\s]*(\d{1,2}:\d{2}\s?(?:AM|PM)?)
Quantity:Quantity[:\s]*(\d+(?:\.\d+)?)
Price:Price[:\s]*(\$?\d+(?:\.\d+)?)
Symbol:Symbol[:\s]*([A-Z]+)
Action:Action[:\s]*(Buy|Sell|Hold)
Status:Status[:\s]*(Pending|Completed|Rejected)
Package:Package[:\s]*(\d+L\d*\s+[A-Z]{3}\s+[\d,]+\.\d{2}\s+\d{2}/\d{2}/\d{4}\s+\d{2}/\d{2}/\d{4}\s+\S+\s+\S+)"""

{
  "entities": [
    {
      "name": "TradeBooking",
      "type": "pattern",
      "patterns": [
        "^\\s*(\\d+[A-Z0-9]+)\\s+([A-Z]{3})\\s+([\\d,]+\\.\\d{2})\\s+(\\d{2}/\\d{2}/\\d{4})\\s+(\\d{2}/\\d{2}/\\d{4})\\s+(\\w+)\\s+(\\w+)\\s+(\\w+)\\s*$"
      ]
    }
  ]
}

def extract_with_patterns(self, text, patterns):
    results = []
    for pat in patterns:
        regex = re.compile(pat, re.MULTILINE)
        matches = regex.findall(text)
        for m in matches:
            if isinstance(m, tuple):  # multiple groups
                trade_id, currency, amount, start_date, end_date, field1, field2, package = m
                results.append({
                    "TradeID": trade_id,
                    "Currency": currency,
                    "Amount": float(amount.replace(",", "")),
                    "StartDate": start_date,
                    "EndDate": end_date,
                    "Field1": field1,
                    "Field2": field2,
                    "Package": package
                })
            else:
                results.append(m)
    return results


trade_ids = [tid.strip() for tid in re.split(",|\\s", trade_ids_str) if tid.strip()]



import pandas as pd

# columns you want
selected_columns = ["CustomerID", "Name"]

records = []
for table in all_tables:
    # turn rows (list of lists) into a dictionary
    row_dict = {row[0]: row[1] for row in table["rows"]}
    # pick only selected columns
    filtered_row = {col: row_dict.get(col) for col in selected_columns}
    filtered_row["Table"] = table["Table"]  # add table name
    records.append(filtered_row)

# build final dataframe
df = pd.DataFrame(records)

print(df)

