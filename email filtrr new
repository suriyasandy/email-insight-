import re
import locale
from datetime import datetime, timedelta

def get_region_datefmt_ampm():
    """
    Map the locale to a standard date format and time style for Restrict.
    Returns: date_fmt, use_ampm (True if 12-hour clock with AM/PM)
    """
    region = locale.getdefaultlocale()[0] if locale.getdefaultlocale() else ''
    # Extend this mapping as needed for your targets
    region_datefmt = {
        'en_US':  ('%m/%d/%Y', True),        # MM/DD/YYYY, 12h
        'en_GB':  ('%d/%m/%Y', False),       # DD/MM/YYYY, 24h
        'en_IN':  ('%d-%m-%Y', False),       # DD-MM-YYYY, 24h
        'fr_FR':  ('%d/%m/%Y', False),       # France
        'de_DE':  ('%d.%m.%Y', False),       # Germany
        'es_ES':  ('%d/%m/%Y', False),       # Spain, etc.
        # Add or modify for your deployment regions!
    }
    # Fallback: US style (12h, MM/DD/YYYY)
    date_fmt, use_ampm = region_datefmt.get(region, ('%m/%d/%Y', True))
    return date_fmt, use_ampm

def restrict_datetime_strings(date_dt, date_fmt, use_ampm):
    """Return (start_time, end_time) Restrict-ready strings for a given day, region settings."""
    if use_ampm:
        am_marker = date_dt.replace(hour=1).strftime('%p')
        pm_marker = date_dt.replace(hour=13).strftime('%p')
        start_time = f"{date_dt.strftime(date_fmt)} 12:00:00 {am_marker}"
        end_time   = f"{date_dt.strftime(date_fmt)} 11:59:59 {pm_marker}"
    else:
        start_time = f"{date_dt.strftime(date_fmt)} 00:00:00"
        end_time   = f"{date_dt.strftime(date_fmt)} 23:59:59"
    return start_time, end_time

def extract_email_chain_from_outlook(self):
    trade_ids_str = None
    df = pd.DataFrame(columns=self.selected_columns)
    if hasattr(self, "trade_ids_var") or isinstance(self.trade_ids_var, tk.StringVar):
        trade_ids_str = self.trade_ids_var.get().strip()
    if not trade_ids_str:
        file_path = self.file_path_var.get().strip()
        if not file_path or not os.path.exists(file_path):
            messagebox.showwarning("Input Error", "Please upload a valid file/input trade_id")
            return
        self.trade_ids_var.set(self.process_trade_file(file_path))
        trade_ids_str = self.trade_ids_var.get().strip()

    trade_ids = [tid.strip() for tid in re.split(",|\\s", trade_ids_str) if tid.strip()]
    folder = self.connect_to_outlook()
    if not folder:
        return

    self.progress.start()
    self.clear_results()
    self.emails = []
    self.unfound_trades = []

    try:
        today = datetime.now()
        days_back = 3

        # --- Hardcoded region-based restrict format ---
        date_fmt, use_ampm = get_region_datefmt_ampm()
        print(f"Detected locale datefmt: {date_fmt}, Use AM/PM: {use_ampm}")

        pattern = re.compile("|".join(re.escape(tid) for tid in trade_ids))
        all_items = []

        for days_ago in range(1, days_back + 1):
            d = today - timedelta(days=days_ago)
            start_time, end_time = restrict_datetime_strings(d, date_fmt, use_ampm)
            filter_str = f"[ReceivedTime] >= '{start_time}' AND [ReceivedTime] <= '{end_time}'"
            print("Trying filter:", filter_str)
            items = folder.Items.Restrict(filter_str)
            items_list = list(items)
            # fallback if AM/PM case doesn't match
            if not items_list and use_ampm:
                am_l = d.replace(hour=1).strftime('%p').lower()
                pm_l = d.replace(hour=13).strftime('%p').lower()
                start_time_l = f"{d.strftime(date_fmt)} 12:00:00 {am_l}"
                end_time_l   = f"{d.strftime(date_fmt)} 11:59:59 {pm_l}"
                filter_str_l = f"[ReceivedTime] >= '{start_time_l}' AND [ReceivedTime] <= '{end_time_l}'"
                items = folder.Items.Restrict(filter_str_l)
                items_list = list(items)
            if items_list:
                print(f"Found {len(items_list)} emails for {d.strftime(date_fmt)}")
                all_items.extend(items_list)
            else:
                print(f"No emails for {d.strftime(date_fmt)}")

        # Use your current matcher/GUI result logic below
        # unchanged for the region-robust restrict!

    except Exception as e:
        messagebox.showerror("Extraction Error", f"Failed to extract emails: {e}")
    finally:
        self.progress.stop()
