from collections import defaultdict
from dateutil import parser
from datetime import datetime

# Group and sort emails
emails_by_trade = defaultdict(list)
for mail in all_emails:
    emails_by_trade[mail['trade_id']].append(mail)
for trade_id in emails_by_trade:
    emails_by_trade[trade_id].sort(
        key=lambda x: parser.parse(x['date']) if x['date'] else datetime.min,
        reverse=True  # newest-to-oldest
    )

# <<< CRITICAL: rebuild self.emails in display order! >>>
self.emails = []
for trade_id in sorted(emails_by_trade.keys()):
    self.emails.append({'trade_id': trade_id, 'emails': emails_by_trade[trade_id]})

# Highlight for latest mails
self.tree.tag_configure('latest', background='#90ee90')

# Populate Treeview using that same structure
idx = 0
for entry in self.emails:
    trade_emails = entry['emails']
    for email_idx, mail in enumerate(trade_emails):
        tags = ('latest',) if email_idx == 0 else ()
        if email_idx == 0:
            email_type = "Latest"
        else:
            subj = mail['subject'].lower()
            if "re:" in subj:
                email_type = f"Reply {email_idx}"
            elif "fw:" in subj or "fwd:" in subj:
                email_type = f"Forward {email_idx}"
            else:
                email_type = f"Email {email_idx}"
        self.tree.insert('', 'end', iid=str(idx), tags=tags, values=(
            mail['trade_id'],
            mail['subject'][:30] + "..." if len(mail['subject']) > 30 else mail['subject'],
            mail['sender'][:20] + "..." if len(mail['sender']) > 20 else mail['sender'],
            mail['recipient'][:20] + "..." if len(mail['recipient']) > 20 else mail['recipient'],
            mail['date'],
            email_type
        ))
        idx += 1
def on_email_select(self, event):
    selection = self.tree.selection()
    if not selection:
        return
    email_index = int(selection[0])
    self.current_email_index = email_index

    # Flatten in SAME order as above!
    flat_emails = []
    for entry in self.emails:
        flat_emails.extend(entry["emails"])
    
    if 0 <= email_index < len(flat_emails):
        email_data = flat_emails[email_index]
        content = f"Trade ID: {email_data['trade_id']}\n"
        content += f"From: {email_data['sender']}\n"
        content += f"To: {email_data['recipient']}\n"
        content += f"Date: {email_data['date']}\n"
        content += f"Subject: {email_data['subject']}\n"
        content += "-" * 50 + "\n"
        content += email_data['body']
        self.content_text.delete(1.0, tk.END)
        self.content_text.insert(1.0, content)
        self.entity_result_text.delete(1.0, tk.END)
